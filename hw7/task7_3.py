# 3. Реализовать программу работы с органическими клетками.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять
# увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных 2х клеток.
# Вычитание. Участвуют 2 клетки. Операцию необходимо выполнять только если разность количества ячеек 2х клеток больше 0,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из 2х. Число ячеек общей клетки определяется
# как произведение количества ячеек этих 2х клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.

# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.

# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: # *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: # *****\n*****\n*****.

# Подсказка: подробный список операторов для перегрузки доступен по ссылке.


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f'{self.quantity * "*"}'

    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other):
        return Cell(self.quantity - other.quantity) if (self.quantity - other.quantity) > 0 else print('резульат < 0 !')

    def __mul__(self, other):
        return Cell(int(self.quantity * other.quantity))

    def __truediv__(self, other):
        return Cell(round(self.quantity / other.quantity))

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.quantity / cells_in_row)):
            row += f'{"*" * cells_in_row}\\n'
        row += f'{"*" * (self.quantity % cells_in_row)}'
        return row

try:
    cell1 = int(input(f'Введите размер первой клетки целым числом: '))
    cell2 = int(input(f'Введите размер второй клетки целым числом: '))
except ValueError:
    print(f'Введённые данные не верны. Повторите ввод.')
    print(f'расчёт на примере cell1 = 13, cell2 = 17: ')
    cell1 = 13
    cell2 = 17

cell1 = Cell(cell1)
cell2 = Cell(cell2)

print(f'Первая клетка: {cell1}')
print(f'Вторая клетка: {cell2}')
print(f'Сложение: {cell1 + cell2}')
print(f'Вычитание: {cell2 - cell1}')
print(f'По рядам 1: {cell1.make_order(12)}')
print(f'По рядам 2: {cell2.make_order(15)}')
print(f'Деление: {cell1 / cell2}')
