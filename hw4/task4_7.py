# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
# начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def task4_7():
    def factorial_elements(res):
        print(f'Вычисляем факториал чисел в диапазоне от 1 до {res}:')
        def fact(n):
            f = 1
            for i in range(1, n + 1):
                f = f * i
                yield f

        n = res
        for el in fact(n):
            print(el)


    # блок выбора данных: демо или введённые пользователем
    def test_data():
        # функция подставляет тестовые данные в случае их отсутствия или некорректного ввода
        print(f'Использую в качестве параметра тестовые данные.')
        test_res = 4
        res = int(test_res)
        return factorial_elements(res)


    res_str = input("Введите конец диапазона (x) для вычисления факториалов от 1! до x!: ")
    if res_str != '':
        try:
            res = int(res_str)
        except ValueError:
            print(f'Введённые данные не соответствуют условию.')
            return test_data()
        return factorial_elements(res)
    else:
        print(f'Данные не предоставлены.')
        return test_data()
    # конец блока выбора данных


task4_7()